#! /usr/bin/env python

"""Odoo Module Generator

Copyright (C) 2016 Nicholas Booker <NMBooker@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
"""

import sys
import argparse
import os.path
import datetime
from funbox.maybe import maybe
from operator import methodcaller

from templates import get_license, renderfile
from common import die
import jinja2
import subprocess
import readline

def rlinput(prompt, prefill=''):
    readline.set_startup_hook(lambda: readline.insert_text(prefill))
    try:
        return raw_input(prompt)
    finally:
        readline.set_startup_hook()

def main(options):
    """Main program."""
    name = options.name
    if os.path.exists(name):
        die(3, 'Directory %s already exists' % name)

    yml = get_yaml_options(options)

    view_basenames = (options.views.split(',') if options.views else []) or yml.get('views', [])
    views = [os.path.join('views', "{}.xml".format(b)) for b in view_basenames]
    ctx = {'name': name, 'repr': repr}
    default_fn = ' '.join(name.split('_')).title()
    ctx['datafiles'] = views[:]
    ctx['fullname'] = options.fullname or yml.get('fullname') or rlinput('Full name: ', default_fn).rstrip()
    ctx['summary'] = options.summary or yml.get('summary') or rlinput('Summary: ', ctx['fullname']).rstrip()
    ctx['author'] = options.author or yml.get('author') or raw_input('Author: ').rstrip()
    ctx['website'] = options.website or yml.get('website') or raw_input('Website: ').rstrip()
    ctx['category'] = options.category or yml.get('category') or raw_input('Category [Extras]): ').strip() or None
    ctx['depends'] = maybe(options.depends, methodcaller('split', ',')) or yml.get('depends') or []
    ctx['auto_install'] = repr(options.auto_install or yml.get('auto_install', False))
    sys.stderr.write(repr(ctx['depends']) + '\n')
    ctx['today'] = datetime.date.today()
    ctx['models'] = models = (options.models.split(',') if options.models else []) or yml.get('models', [])

    ctx['license_name'] = options.license or yml.get('license') or 'AGPL-3'
    ctx['license'] = get_license(ctx)   # This relies on ctx['license_name'] and lots of other stuff so order is important

    os.mkdir(name)
    os.chdir(name)

    openerp_py_path = '__openerp__.py'
    renderfile(openerp_py_path, TEMPLATE_OPENERP_PY, ctx)
    os.mkdir('models')

    for model in models:
        subprocess.call(['odoogen-py', os.path.join('models', model+'.py')])

    init_py_path = '__init__.py'
    renderfile(init_py_path, TEMPLATE_INIT_PY, ctx)
    renderfile(os.path.join('models', '__init__.py'), TEMPLATE_MODELS_INIT_PY, ctx)
    os.mkdir(os.path.join('views'))
    for view in views:
        renderfile(view, TEMPLATE_XML, ctx)
    os.mkdir(os.path.join('security'))
    return

def get_yaml_options(options):
    """Naively use YAML files.  A key in any YAML file overrides the key in previous YAML files."""
    default_conf_file = '.odoogen.yml'
    paths = []
    if options.from_files:
        paths = options.from_files
    elif (not options.no_files) and os.path.exists(default_conf_file):
        paths = [default_conf_file]
    if paths:
        import yaml
    ymldata = {}
    for path in paths:
        with open(path, 'rb') as ymlfile:
            ymldata.update(yaml.safe_load(ymlfile))
    return ymldata

def get_options():
    """Get options for the script."""
    parser = argparse.ArgumentParser(
        description="Odoo Module Generator",
    )
    parser.add_argument('name', help='name of odoo module to generate')
    parser.add_argument('--from-file', '-y', action='append', dest='from_files', help='get data from YAML file')
    parser.add_argument('--author', '-a', default=None, help='Author name')
    parser.add_argument('--license', '-l', default=None, help='License (AGPL-3, IPA-Schedule)')
    parser.add_argument('--fullname', '-f', default=None, help='Full name')
    parser.add_argument('--summary', '-s', default=None, help='Summary')
    parser.add_argument('--website', '-w', default=None, help='Website URL')
    parser.add_argument('--category', '-c', default=None, help='Category')
    parser.add_argument('--depends', '-D', default=None, help='Dependencies e.g. -D account,sale')
    parser.add_argument('--auto-install', '-A', action='store_true', help='set auto_install True')
    parser.add_argument('--models', '-M', default=None, help='Comma-separated list of models modules to mint, e.g. sale,partner')
    parser.add_argument('--views', '-V', default=None, help='Comma-separated list of view XML file basenames')
    parser.add_argument('--no-files', action='store_true', help='Skip .odoogen.yml even if other files not specified')
    options = parser.parse_args()
    return options

TEMPLATE_INIT_PY = """# -*- coding: utf-8 -*-
{{license}}

from . import models

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
"""

TEMPLATE_MODELS_INIT_PY = """# -*- coding: utf-8 -*-
{{license}}

{{'# ' if not models else ''}}from . import (
{% for model in models %}
    {{model}},
{% endfor %}
{{'# ' if not models else ''}})

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
"""

TEMPLATE_OPENERP_PY = """# -*- coding: utf-8 -*-
{{license}}


{
    'name': {{repr(fullname)}},
    'version': '0.1',
    'author': {{repr(author)}},
    'website': {{repr(website)}},
    'summary': {{repr(summary)}},
    {% if category %}
    'category': {{repr(category)}},
    {% endif %}
    'description': \"\"\"{{summary}},
\"\"\",
    'images': [
    ],
    'depends': [{% for mod in depends %}
        '{{mod}}',{% endfor %}
    ],
    'data': [{% for path in datafiles %}
        '{{path}}',{% endfor %}
    ],
    'demo': [
    ],
    'test': [
    ],
    'license': '{{license_name}}',
    'installable': True,
    'auto_install': {{auto_install}},

}

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
"""

TEMPLATE_XML = """<?xml version="1.0" encoding="utf-8"?>
<openerp>
    <data>
    </data>
</openerp>
"""

if __name__ == "__main__":
    main(get_options())
